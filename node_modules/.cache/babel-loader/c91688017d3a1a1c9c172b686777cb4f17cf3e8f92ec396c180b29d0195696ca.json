{"ast":null,"code":"var _jsxFileName = \"F:\\\\sharp\\\\Project\\\\movie-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  // FETCHING DATA USING FETCH METHOD\n  // function fetchMovieHandler(){\n  //   fetch('https://swapi.py4e.com/api/films').then((response)=>{\n  //     return response.json();\n  //   }).then((data)=>{\n  //     const transformMovies = data.results.map((movieData)=>{\n  //       return {\n  //         id:movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date\n  //       }\n  //     })\n  //     setMovies(transformMovies);\n  //   })\n  // }\n\n  // useEffect(() => {\n  // const timer = setInterval(fetchMovieHandler(), 5000);\n  //      return () => clearInterval(timer);\n  //   }, [error]);\n\n  useEffect(() => {\n    fetchMovieHandler();\n  }, []);\n\n  // FETCHING DATA USING ASYNC AWAIT \n\n  async function fetchMovieHandler() {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await fetch('https://swapi.py4e.com/api/ilms/');\n      if (!res.ok) {\n        throw new Error('something went wrong!....Retrying');\n        // timer = setInterval(fetchMovieHandler,5000)\n      }\n\n      const data = await res.json();\n      const transformMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setLoading(false);\n  }\n\n  // console.log(timer)\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no movies.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", error, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }, this);\n  }\n\n  // const cancelRetryingHandler = ()=>{\n  //   // clearInterval(timer)\n  //   setError(error.message);\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovieHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xXD8di9vWgS1KOCnRhJVIiGFimU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MoviesList","App","movies","setMovies","isLoading","setLoading","error","setError","fetchMovieHandler","res","fetch","ok","Error","data","json","transformMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"sources":["F:/sharp/Project/movie-app/src/App.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n   const [movies, setMovies] = useState([])\n   const [isLoading, setLoading] = useState(false)\n   const [error, setError] = useState(null)\n\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  // FETCHING DATA USING FETCH METHOD\n  // function fetchMovieHandler(){\n  //   fetch('https://swapi.py4e.com/api/films').then((response)=>{\n  //     return response.json();\n  //   }).then((data)=>{\n  //     const transformMovies = data.results.map((movieData)=>{\n  //       return {\n  //         id:movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date\n  //       }\n  //     })\n  //     setMovies(transformMovies);\n  //   })\n  // }\n \n\n  // useEffect(() => {\n  // const timer = setInterval(fetchMovieHandler(), 5000);\n  //      return () => clearInterval(timer);\n  //   }, [error]);\n\n\nuseEffect(()=>{\n  fetchMovieHandler()\n},[])\n\n\n  // FETCHING DATA USING ASYNC AWAIT \n\n  async function fetchMovieHandler(){\n    setLoading(true);\n    setError(null)\n    \n    try{\n      \n      const res = await fetch('https://swapi.py4e.com/api/ilms/')\n\n      if(!res.ok){\n        throw new Error('something went wrong!....Retrying')\n          // timer = setInterval(fetchMovieHandler,5000)\n    \n    }\n\n      const data = await res.json();\n    \n     \n        const transformMovies = data.results.map((movieData)=>{\n          return {\n            id:movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date\n          }\n        })\n        setMovies(transformMovies);\n         \n    }\n    catch(error){\n      setError(error.message);\n    }\n    setLoading(false);\n    }\n\n  // console.log(timer)\n    \n \n  \n\n\n   \n  let content = <p>Found no movies.</p>\n\n  if(movies.length > 0){\n    content = <MoviesList movies={movies} />\n  }\n\n  if(error){\n    content = (\n      <div>\n        <p> {error} </p>\n        {/* <button onClick={cancelRetryingHandler}> Cancel Retry </button> */}\n      </div>\n    );\n  }\n\n  if(isLoading){\n    content = <p>Loading...</p>\n  }\n  \n  // const cancelRetryingHandler = ()=>{\n  //   // clearInterval(timer)\n  //   setError(error.message);\n    \n  // }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n        {/* <button onClick={cancelRetryingHandler}>Cancel Retrying</button> */}\n      </section>\n      <section>\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAEjD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACZ,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;;EAGFC,SAAS,CAAC,MAAI;IACZS,iBAAiB,EAAE;EACrB,CAAC,EAAC,EAAE,CAAC;;EAGH;;EAEA,eAAeA,iBAAiB,GAAE;IAChCH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAG;MAED,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;MAE3D,IAAG,CAACD,GAAG,CAACE,EAAE,EAAC;QACT,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;QAClD;MAEN;;MAEE,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,EAAE;MAG3B,MAAMC,eAAe,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,SAAS,IAAG;QACpD,OAAO;UACLC,EAAE,EAACD,SAAS,CAACE,UAAU;UACvBC,KAAK,EAAEH,SAAS,CAACG,KAAK;UACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;UACpCC,WAAW,EAAEN,SAAS,CAACO;QACzB,CAAC;MACH,CAAC,CAAC;MACFtB,SAAS,CAACY,eAAe,CAAC;IAE9B,CAAC,CACD,OAAMT,KAAK,EAAC;MACVC,QAAQ,CAACD,KAAK,CAACoB,OAAO,CAAC;IACzB;IACArB,UAAU,CAAC,KAAK,CAAC;EACjB;;EAEF;;EAOA,IAAIsB,OAAO,gBAAG;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAuB;EAErC,IAAGzB,MAAM,CAAC0B,MAAM,GAAG,CAAC,EAAC;IACnBD,OAAO,gBAAG,QAAC,UAAU;MAAC,MAAM,EAAEzB;IAAO;MAAA;MAAA;MAAA;IAAA,QAAG;EAC1C;EAEA,IAAGI,KAAK,EAAC;IACPqB,OAAO,gBACL;MAAA,uBACE;QAAA,gBAAKrB,KAAK;MAAA;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA,QAGnB;EACH;EAEA,IAAGF,SAAS,EAAC;IACXuB,OAAO,gBAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB;EAC7B;;EAEA;EACA;EACA;;EAEA;;EAEA,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb;MAAA,uBACE;QAAQ,OAAO,EAAEnB,iBAAkB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAsB;MAAA;MAAA;MAAA;IAAA,QAEjD,eACV;MAAA,UACGmB;IAAO;MAAA;MAAA;MAAA;IAAA,QACA;EAAA;IAAA;IAAA;IAAA;EAAA,QACK;AAErB;AAAC,GAhIQ1B,GAAG;AAAA,KAAHA,GAAG;AAkIZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}